/**
 * 原题要求：
 * 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
 * <p>
 * 示例 1:
 * <p>
 * 输入: 121
 * 输出: true
 * 示例 2:
 * <p>
 * 输入: -121
 * 输出: false
 * 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
 * 示例 3:
 * <p>
 * 输入: 10
 * 输出: false
 * 解释: 从右向左读, 为 01 。因此它不是一个回文数。
 * <p>
 * 解题思路
 * 为了不使用额外的空间，参考了其它的解决，那些解法看起来在isPalindrome方法中没有使用额外参数，
 * 但是却使用了方法调用，这个比一个整数消耗的空间更多 ，并没有达到题目的要求，是假的实现，
 * 所以本题依然采用一个额外的空间进行实现。首先，负数不是回文数字，其次对数字进行逆转，
 * 123变成321这样，如果变换后的数字相等说明是回文数字。
 *
 * @ClassName: Main
 * @Author: Mr.Ye
 * @Data: 2018-12-25 20:40
 **/

class Solution {
    public boolean isPalindrome(int x) {
        // 负数不是回访数字
        if (x < 0) {
            return false;
        }

        // 数字逆转后的值，为了不使用溢出采用long
        long reverse = 0;
        int tmp = x;

        // 求逆转后的值
        while (tmp != 0) {
            reverse = reverse * 10 + tmp % 10;
            tmp /= 10;
        }

        // 判断是否是回文数字
        return x == reverse;
    }
}

public class Main {
}
